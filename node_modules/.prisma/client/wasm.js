
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.ProjectUserScalarFieldEnum = {
  projectId: 'projectId',
  userId: 'userId',
  assignedAt: 'assignedAt'
};

exports.Prisma.ProjectAccountScalarFieldEnum = {
  projectId: 'projectId',
  accountId: 'accountId',
  assignedAt: 'assignedAt'
};

exports.Prisma.BoardScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.ColumnScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  boardId: 'boardId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  priority: 'priority',
  dueDate: 'dueDate',
  status: 'status',
  position: 'position',
  archive: 'archive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  columnId: 'columnId',
  createdById: 'createdById',
  claimId: 'claimId'
};

exports.Prisma.TaskAccountScalarFieldEnum = {
  taskId: 'taskId',
  accountId: 'accountId',
  assignedAt: 'assignedAt'
};

exports.Prisma.TaskAssigneeScalarFieldEnum = {
  taskId: 'taskId',
  userId: 'userId',
  assignedAt: 'assignedAt'
};

exports.Prisma.TaskCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId',
  userId: 'userId'
};

exports.Prisma.TaskAttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  originalName: 'originalName',
  s3Key: 's3Key',
  s3Bucket: 's3Bucket',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedAt: 'uploadedAt',
  isPublic: 'isPublic',
  etag: 'etag',
  checksum: 'checksum',
  taskId: 'taskId',
  uploadedById: 'uploadedById'
};

exports.Prisma.TaskLabelScalarFieldEnum = {
  taskId: 'taskId',
  labelId: 'labelId',
  assignedAt: 'assignedAt'
};

exports.Prisma.LabelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  colour: 'colour',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  injured: 'injured',
  email: 'email',
  phone: 'phone',
  password: 'password',
  phone2: 'phone2',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  isUnder18: 'isUnder18',
  fatherFirstName: 'fatherFirstName',
  fatherLastName: 'fatherLastName',
  motherFirstName: 'motherFirstName',
  motherLastName: 'motherLastName',
  mailingAddress1: 'mailingAddress1',
  mailingAddress2: 'mailingAddress2',
  mailingCity: 'mailingCity',
  mailingState: 'mailingState',
  mailingZipCode: 'mailingZipCode',
  isPOBoxOrDifferentAddress: 'isPOBoxOrDifferentAddress',
  physicalAddress1: 'physicalAddress1',
  physicalAddress2: 'physicalAddress2',
  physicalCity: 'physicalCity',
  physicalState: 'physicalState',
  physicalZipCode: 'physicalZipCode',
  maritalStatus: 'maritalStatus',
  spouseFirstName: 'spouseFirstName',
  spouseLastName: 'spouseLastName',
  spousePhone: 'spousePhone',
  employmentStatus: 'employmentStatus',
  employerName: 'employerName',
  employerTitle: 'employerTitle',
  employmentType: 'employmentType',
  pay: 'pay',
  schoolName: 'schoolName',
  expectedGraduationYear: 'expectedGraduationYear',
  role: 'role',
  isVerified: 'isVerified',
  verificationCode: 'verificationCode',
  sourceId: 'sourceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  claimlistId: 'claimlistId',
  accountSync: 'accountSync'
};

exports.Prisma.VerifyScalarFieldEnum = {
  id: 'id',
  token: 'token',
  url: 'url',
  status: 'status',
  sessionId: 'sessionId',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ClaimScalarFieldEnum = {
  id: 'id',
  status: 'status',
  injured: 'injured',
  relationship: 'relationship',
  otherRelationship: 'otherRelationship',
  healthInsurance: 'healthInsurance',
  healthInsuranceNumber: 'healthInsuranceNumber',
  isOver65: 'isOver65',
  receiveMedicare: 'receiveMedicare',
  assignedCaseManager: 'assignedCaseManager',
  userId: 'userId',
  clientRoleId: 'clientRoleId',
  injuredPartyRoleId: 'injuredPartyRoleId',
  incidentId: 'incidentId',
  healthInsuranceProviderId: 'healthInsuranceProviderId',
  claimlistId: 'claimlistId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectClaimScalarFieldEnum = {
  projectId: 'projectId',
  claimId: 'claimId',
  assignedAt: 'assignedAt'
};

exports.Prisma.EnvelopScalarFieldEnum = {
  id: 'id',
  status: 'status',
  claimId: 'claimId',
  submitterUrl: 'submitterUrl',
  submitterId: 'submitterId',
  submittedUrl: 'submittedUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ClaimListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  enable: 'enable',
  questionId: 'questionId',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.SourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  enable: 'enable'
};

exports.Prisma.QuestionnaireScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId'
};

exports.Prisma.QuestionAnswerScalarFieldEnum = {
  id: 'id',
  questionnaireId: 'questionnaireId',
  questionId: 'questionId',
  answer: 'answer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  claimListId: 'claimListId',
  type: 'type',
  enable: 'enable'
};

exports.Prisma.ChoiceScalarFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
};

exports.Prisma.DefendantScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId'
};

exports.Prisma.DefendantDetailsScalarFieldEnum = {
  id: 'id',
  defendantRole: 'defendantRole',
  defendantAccountId: 'defendantAccountId',
  defendantInsuranceCarrierId: 'defendantInsuranceCarrierId',
  insurancePolicyNumber: 'insurancePolicyNumber',
  driverLicenseNumber: 'driverLicenseNumber',
  driverLicenseState: 'driverLicenseState',
  vehicleMake: 'vehicleMake',
  vehicleModel: 'vehicleModel',
  vehicleYear: 'vehicleYear',
  vehicleColor: 'vehicleColor',
  vehiclePlate: 'vehiclePlate',
  vehiclePosition: 'vehiclePosition',
  vehicleRegisteredState: 'vehicleRegisteredState',
  collisionType: 'collisionType',
  supervisorName: 'supervisorName',
  supervisorContact: 'supervisorContact',
  client: 'client',
  groupId: 'groupId',
  sort: 'sort',
  defendantId: 'defendantId'
};

exports.Prisma.TreatmentAndInjuryScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  treatmentId: 'treatmentId'
};

exports.Prisma.TreatmentScalarFieldEnum = {
  id: 'id',
  takenHospital: 'takenHospital',
  isCurrentlyTreated: 'isCurrentlyTreated',
  hospitalId: 'hospitalId',
  doctorId: 'doctorId',
  admission: 'admission',
  discharge: 'discharge',
  lastVisit: 'lastVisit',
  otherInjuries: 'otherInjuries'
};

exports.Prisma.InjuryScalarFieldEnum = {
  id: 'id',
  injuryLocation: 'injuryLocation',
  injury: 'injury',
  injuryLocationSide: 'injuryLocationSide',
  other: 'other',
  treatmentId: 'treatmentId'
};

exports.Prisma.AccidentMediaScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  thumbnail: 'thumbnail',
  claimId: 'claimId'
};

exports.Prisma.IncidentScalarFieldEnum = {
  id: 'id',
  vehicleRole: 'vehicleRole',
  vehicleCount: 'vehicleCount',
  busOrVehicle: 'busOrVehicle',
  transportType: 'transportType',
  rideShareCompany: 'rideShareCompany',
  rideShareOtherName: 'rideShareOtherName',
  propertyType: 'propertyType',
  datetime: 'datetime',
  location: 'location',
  workRelated: 'workRelated',
  description: 'description',
  policeReportCompleted: 'policeReportCompleted',
  policeStationId: 'policeStationId',
  policeOfficerId: 'policeOfficerId',
  reportCompleted: 'reportCompleted',
  reportNumber: 'reportNumber',
  supportingDocument: 'supportingDocument',
  lostEarning: 'lostEarning',
  amountLoss: 'amountLoss',
  timeLoss: 'timeLoss',
  witness: 'witness',
  priorRepresentation: 'priorRepresentation',
  priorRepresentationReason: 'priorRepresentationReason',
  lawfirmId: 'lawfirmId',
  attorneyId: 'attorneyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WitnessScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId'
};

exports.Prisma.WitnessDetailsScalarFieldEnum = {
  id: 'id',
  witnessId: 'witnessId',
  roleId: 'roleId'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  roletypeId: 'roletypeId'
};

exports.Prisma.RoleTypeScalarFieldEnum = {
  id: 'id',
  roleType: 'roleType',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  enable: 'enable'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  phone2: 'phone2',
  fax: 'fax',
  mailingAddress: 'mailingAddress',
  mailingAddressBuilding: 'mailingAddressBuilding',
  mailingCity: 'mailingCity',
  mailingState: 'mailingState',
  mailingZipCode: 'mailingZipCode',
  billingAddressStreet: 'billingAddressStreet',
  billingAddressBuilding: 'billingAddressBuilding',
  billingAddressCity: 'billingAddressCity',
  billingAddressState: 'billingAddressState',
  billingAddressPostalCode: 'billingAddressPostalCode',
  website: 'website',
  enable: 'enable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubAccountScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  accountId: 'accountId',
  enable: 'enable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarScalarFieldEnum = {
  id: 'id',
  make: 'make',
  model: 'model',
  year: 'year'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.WereYouInjured = exports.$Enums.WereYouInjured = {
  Yes: 'Yes',
  Someone: 'Someone',
  No: 'No'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.ClaimStatus = exports.$Enums.ClaimStatus = {
  PENDING_INFORMATION: 'PENDING_INFORMATION',
  UNDER_REVIEW: 'UNDER_REVIEW',
  PENDING_DOCUMENTS: 'PENDING_DOCUMENTS',
  INVESTIGATION: 'INVESTIGATION',
  PRE_SUIT: 'PRE_SUIT',
  PRE_LITIGATION: 'PRE_LITIGATION',
  LITIGATION: 'LITIGATION',
  RESOLVED_AND_CLOSED: 'RESOLVED_AND_CLOSED'
};

exports.Relationship = exports.$Enums.Relationship = {
  Self: 'Self',
  Parent: 'Parent',
  Child: 'Child',
  Sibiling: 'Sibiling',
  Friend: 'Friend',
  Representative: 'Representative',
  Other: 'Other'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  TEXTFIELD: 'TEXTFIELD',
  DATE: 'DATE',
  SELECTMENU: 'SELECTMENU',
  YESNO: 'YESNO'
};

exports.DefendantRole = exports.$Enums.DefendantRole = {
  Operator: 'Operator',
  Owner: 'Owner',
  Operator_Owner: 'Operator_Owner',
  MTA: 'MTA',
  AVIATION: 'AVIATION',
  EMPLOYER: 'EMPLOYER',
  SUPERVISOR: 'SUPERVISOR',
  PROPERTY_OWNER: 'PROPERTY_OWNER',
  TRAIN: 'TRAIN',
  Other: 'Other'
};

exports.CollisionType = exports.$Enums.CollisionType = {
  HEAD_ON: 'HEAD_ON',
  REAR_END: 'REAR_END',
  SIDE_IMPACT: 'SIDE_IMPACT',
  SIDESWIPE: 'SIDESWIPE'
};

exports.InjuryPoint = exports.$Enums.InjuryPoint = {
  Shoulder: 'Shoulder',
  Elbow: 'Elbow',
  Leg: 'Leg',
  Knee: 'Knee',
  Hip_Pelvic: 'Hip_Pelvic',
  Arm: 'Arm',
  Wrist: 'Wrist',
  Thigh: 'Thigh',
  Ankle: 'Ankle',
  Finger: 'Finger',
  Toe: 'Toe',
  Hand: 'Hand',
  Foot: 'Foot',
  Other: 'Other'
};

exports.InjuryType = exports.$Enums.InjuryType = {
  Laceration: 'Laceration',
  Contusion_Bruises: 'Contusion_Bruises',
  Broken: 'Broken',
  Fracture: 'Fracture',
  Tear: 'Tear',
  Sprain: 'Sprain',
  Other: 'Other'
};

exports.InjurySide = exports.$Enums.InjurySide = {
  Left: 'Left',
  Right: 'Right',
  Both: 'Both'
};

exports.BusOrVehicle = exports.$Enums.BusOrVehicle = {
  Passenger: 'Passenger',
  Other_Vehicle: 'Other_Vehicle'
};

exports.TransportType = exports.$Enums.TransportType = {
  Bus: 'Bus',
  Train: 'Train'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  Business: 'Business',
  Private_Property: 'Private_Property'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  ProjectUser: 'ProjectUser',
  ProjectAccount: 'ProjectAccount',
  Board: 'Board',
  Column: 'Column',
  Task: 'Task',
  TaskAccount: 'TaskAccount',
  TaskAssignee: 'TaskAssignee',
  TaskComment: 'TaskComment',
  TaskAttachment: 'TaskAttachment',
  TaskLabel: 'TaskLabel',
  Label: 'Label',
  User: 'User',
  Verify: 'Verify',
  Claim: 'Claim',
  ProjectClaim: 'ProjectClaim',
  Envelop: 'Envelop',
  ClaimList: 'ClaimList',
  Source: 'Source',
  Questionnaire: 'Questionnaire',
  QuestionAnswer: 'QuestionAnswer',
  Question: 'Question',
  Choice: 'Choice',
  Defendant: 'Defendant',
  DefendantDetails: 'DefendantDetails',
  TreatmentAndInjury: 'TreatmentAndInjury',
  Treatment: 'Treatment',
  Injury: 'Injury',
  AccidentMedia: 'AccidentMedia',
  Incident: 'Incident',
  Witness: 'Witness',
  WitnessDetails: 'WitnessDetails',
  Role: 'Role',
  RoleType: 'RoleType',
  Account: 'Account',
  SubAccount: 'SubAccount',
  Car: 'Car'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
